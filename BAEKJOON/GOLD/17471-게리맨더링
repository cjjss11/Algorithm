from collections import deque
from itertools import combinations
import sys
sys.setrecursionlimit(10**6)
input = sys.stdin.readline

def bfs(arr):
    global people,lst
    start = arr[0]
    q = deque([start])
    used = set([start])
    num = 0

    while q:
        value = q.popleft()
        num += people[value]
        for i in lst[value]:
            if i not in used and i in arr:
                q.append(i)
                used.add(i)
    return num, len(used)

N = int(input())
people = [0] + list(map(int,input().split()))
lst = [0]*(N+1)
result = float('inf')

for i in range(1,N+1):
    lst[i] = list(map(int,input().split()))
    lst[i] = lst[i][1:]

for i in range(1, N//2+1):
    connects = list(combinations(range(1,N+1),i))
    for connect in connects:
        sum1, node1 = bfs(connect)
        sum2, node2 = bfs([i for i in range(1,N+1) if i not in connect])
        if node1 + node2 == N:
            result = min(result, abs(sum1-sum2))

if result != float('inf'):
    print(result)
else:
    print(-1)